name: Mini E2E + Health

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch: {}

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: python -m pip install -r lambda/dev_requirements.txt

      - name: Run Phase 2 verification suite
        run: bash scripts/phase2_verification.sh

      - name: Publish verification artifact
        if: always()
        run: |
          mkdir -p artifacts
          if [ -f .out/verification.json ]; then
            cp .out/verification.json artifacts/verification.json
          else
            echo '{}' > artifacts/verification.json
          fi

      - name: Upload verification artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verification
          path: artifacts/verification.json

  k6:
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.COGNITO_REGION }}

      - name: Generate Cognito bearer
        id: bearer
        env:
          COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
          COGNITO_CLIENT_SECRET: ${{ secrets.COGNITO_CLIENT_SECRET }}
          COGNITO_USERNAME: ${{ secrets.COGNITO_USERNAME }}
          COGNITO_PASSWORD: ${{ secrets.COGNITO_PASSWORD }}
          COGNITO_REGION: ${{ secrets.COGNITO_REGION }}
        run: |
          SECRET_HASH=$(python3 - <<'PY'
import base64, hmac, hashlib, os
username = os.environ["COGNITO_USERNAME"]
client_id = os.environ["COGNITO_CLIENT_ID"]
client_secret = os.environ["COGNITO_CLIENT_SECRET"]
digest = hmac.new(client_secret.encode(), (username + client_id).encode(), hashlib.sha256).digest()
print(base64.b64encode(digest).decode())
PY
          )
          ID_TOKEN=$(aws cognito-idp initiate-auth \
            --auth-flow USER_PASSWORD_AUTH \
            --client-id "$COGNITO_CLIENT_ID" \
            --auth-parameters USERNAME="$COGNITO_USERNAME",PASSWORD="$COGNITO_PASSWORD",SECRET_HASH="$SECRET_HASH" \
            --region "$COGNITO_REGION" \
            --query 'AuthenticationResult.IdToken' \
            --output text)
          echo "token=$ID_TOKEN" >> "$GITHUB_OUTPUT"

      - name: Run k6 smoke test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: k6/smoke.js
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          BEARER: ${{ steps.bearer.outputs.token }}
          USER: ${{ secrets.TEST_USER }}
